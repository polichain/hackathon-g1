{
  "language": "Solidity",
  "sources": {
    "contracts/DonationPlatform.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract DonationPlatform {\n    enum Status { Pending, Verified, Donated, WaitingForPickup, InTransit, Delivered }\n\n    struct Request {\n        uint256 id;\n        string beneficiary;\n        string description;\n        Status status;\n        bool requiresTransport;\n        string donor;\n        bool delivered;\n        string carrier;\n        uint256 transitStartTime;\n    }\n\n    Request[] public requests;\n\n    mapping(uint256 => uint256) public requestToIndex;\n\n    event RequestRegistered(uint256 id, string beneficiary, string description, bool requiresTransport);\n    event RequestVerified(uint256 id);\n    event DonationReceived(uint256 id, string donor);\n    event DonationInTransit(uint256 id, string carrier, uint256 transitStartTime);\n    event RequestDelivered(uint256 id);\n\n    address public admin;\n\n    constructor(address owner) {\n        admin = owner;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Only admin can perform this action\");\n        _;\n    }\n\n    function registerRequest(string memory _beneficiary, string memory _description, bool _requiresTransport) public onlyAdmin {\n        requests.push(Request({\n            id: requests.length,\n            beneficiary: _beneficiary,\n            description: _description,\n            status: Status.Pending,\n            requiresTransport: _requiresTransport,\n            donor: \"\",\n            delivered: false,\n            carrier: \"\",\n            transitStartTime: 0\n        }));\n        emit RequestRegistered(requests.length - 1, _beneficiary, _description, _requiresTransport);\n    }\n\n    function verifyRequest(uint256 _id) public onlyAdmin {\n        require(requests[_id].status == Status.Pending, \"Request must be pending verification\");\n        requests[_id].status = Status.Verified;\n        emit RequestVerified(_id);\n    }\n\n    function donate(uint256 _id, string memory _donor) public onlyAdmin {\n        require(requests[_id].status == Status.Verified, \"Request must be verified to donate\");\n        requests[_id].donor = _donor;\n        requests[_id].status = Status.Donated;\n        emit DonationReceived(_id, _donor);\n        \n        if (!requests[_id].requiresTransport) {\n            requests[_id].status = Status.WaitingForPickup;\n        }\n    }\n\n    function startTransport(uint256 _id, string memory _carrier) public onlyAdmin {\n        require(requests[_id].status == Status.Donated, \"Donation must be in Donated status to start transport\");\n\n        requests[_id].carrier = _carrier;\n        requests[_id].transitStartTime = block.timestamp;\n        requests[_id].status = Status.InTransit;\n\n        emit DonationInTransit(_id, _carrier, block.timestamp);\n    }\n\n    function confirmDelivery(uint256 _id) public onlyAdmin {\n        require(requests[_id].status == Status.InTransit || requests[_id].status == Status.WaitingForPickup, \n                \"Donation must be in transit or waiting for pickup to confirm delivery\");\n\n        requests[_id].delivered = true;\n        requests[_id].status = Status.Delivered;\n        emit RequestDelivered(_id);\n    }\n\n    function getRequest(uint256 _id) public view returns (string memory) {\n        Request memory request = requests[_id];\n        \n        string memory result = string(\n            abi.encodePacked(\n                uint2str(request.id), \",\",\n                request.beneficiary, \",\",\n                request.description, \",\",\n                uint2str(uint(request.status)), \",\",\n                request.requiresTransport ? \"true\" : \"false\", \",\",\n                request.donor, \",\",\n                request.delivered ? \"true\" : \"false\", \",\",\n                request.carrier, \",\",\n                uint2str(request.transitStartTime)\n            )\n        );\n\n        return result;\n    }\n\n    function getRequestCount() public view returns (uint256) {\n        return requests.length;\n    }\n\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len;\n        while (_i != 0) {\n            k = k-1;\n            uint256 temp = _i % 10;\n            _i /= 10;\n            bstr[k] = bytes1(uint8(48 + temp));\n        }\n        return string(bstr);\n    }\n\n    function getDonationStatus(uint256 _id) public view returns (string memory) {\n        Status status = requests[_id].status;\n        \n        if (status == Status.Pending) {\n            return \"Pending\";\n        } else if (status == Status.Verified) {\n            return \"Verified\";\n        } else if (status == Status.Donated) {\n            return \"Donated\";\n        } else if (status == Status.WaitingForPickup) {\n            return \"WaitingForPickup\";\n        } else if (status == Status.InTransit) {\n            return \"InTransit\";\n        } else if (status == Status.Delivered) {\n            return \"Delivered\";\n        } else {\n            return \"Unknown\";\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}